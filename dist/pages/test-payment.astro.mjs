import { c as createComponent, b as renderTemplate, r as renderComponent, m as maybeRenderHead } from '../chunks/astro/server_D634BqaN.mjs';
import 'kleur/colors';
import { $ as $$MainLayout } from '../chunks/MainLayout_D0LpAQtS.mjs';
/* empty css                                        */
export { renderers } from '../renderers.mjs';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const $$TestPayment = createComponent(async ($$result, $$props, $$slots) => {
  return renderTemplate(_a || (_a = __template(["", "  <script>\n  // Test Functions\n  function logOutput(message, type = 'info') {\n    const output = document.getElementById('test-output');\n    const timestamp = new Date().toLocaleTimeString();\n    const color = type === 'error' ? '#ff6b6b' : type === 'success' ? '#51cf66' : '#00ff00';\n    \n    output.innerHTML += `<div style=\"color: ${color}; margin-bottom: 0.5rem;\">\n      [${timestamp}] ${message}\n    </div>`;\n    output.scrollTop = output.scrollHeight;\n  }\n\n  function clearOutput() {\n    document.getElementById('test-output').innerHTML = '';\n  }\n\n  window.testPremiumPayment = async function(plan) {\n    clearOutput();\n    logOutput(`\u{1F3B5} Testing ${plan} premium payment...`);\n    \n    const amounts = {\n      weekly: 99,\n      monthly: 299,\n      small: 1\n    };\n    \n    const duration = plan === 'weekly' ? '7 days' : '30 days';\n    \n    if (window.paymentModal) {\n      logOutput(`Opening payment modal for ${plan} plan (KSh ${amounts[plan]})`);\n      window.paymentModal.open({\n        type: 'music',\n        amount: amounts[plan],\n        duration: duration,\n        title: `Test ${plan.charAt(0).toUpperCase() + plan.slice(1)} Premium Access`,\n        items: null\n      });\n    } else {\n      logOutput('\u274C Payment modal not available', 'error');\n    }\n  }\n\n  window.testMerchandisePayment = async function() {\n    clearOutput();\n    logOutput('\u{1F6CD}\uFE0F Testing merchandise payment...');\n    \n    const testItems = [\n      {\n        id: 'test-hoodie',\n        name: 'Test Hoodie',\n        price: 30,\n        quantity: 1,\n        size: 'M',\n        color: 'Black'\n      },\n      {\n        id: 'test-tshirt',\n        name: 'Test T-Shirt',\n        price: 20,\n        quantity: 1,\n        size: 'L',\n        color: 'Gold'\n      }\n    ];\n    \n    if (window.paymentModal) {\n      logOutput('Opening payment modal for test merchandise (KSh 50)');\n      window.paymentModal.open({\n        type: 'merchandise',\n        amount: 50,\n        items: testItems,\n        title: 'Test Merchandise Order'\n      });\n    } else {\n      logOutput('\u274C Payment modal not available', 'error');\n    }\n  }\n\n  window.testDirectAPI = async function() {\n    clearOutput();\n    logOutput('\u{1F527} Testing direct API call...');\n    \n    const phone = document.getElementById('test-phone').value;\n    const amount = parseInt(document.getElementById('test-amount').value);\n    const description = document.getElementById('test-desc').value;\n    \n    if (!phone || !amount) {\n      logOutput('\u274C Please fill in phone number and amount', 'error');\n      return;\n    }\n    \n    // Validate phone format\n    const phoneRegex = /^254[0-9]{9}$/;\n    if (!phoneRegex.test(phone)) {\n      logOutput('\u274C Invalid phone format. Use 254XXXXXXXXX', 'error');\n      return;\n    }\n    \n    try {\n      logOutput(`\u{1F4F1} Sending STK push to ${phone} for KSh ${amount}...`);\n      \n      const response = await fetch('/.netlify/functions/payment-gateway', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          phone: phone,\n          amount: amount,\n          type: 'test',\n          description: description\n        })\n      });\n      \n      const result = await response.json();\n      \n      if (response.ok && result.success) {\n        logOutput('\u2705 STK push sent successfully!', 'success');\n        logOutput(`\u{1F4CB} Checkout Request ID: ${result.checkoutRequestId}`);\n        logOutput(`\u{1F4CB} Merchant Request ID: ${result.merchantRequestId}`);\n        logOutput('\u{1F4F1} Check your phone to complete the payment');\n      } else {\n        logOutput(`\u274C API Error: ${result.error || 'Unknown error'}`, 'error');\n        if (result.details) {\n          logOutput(`Details: ${JSON.stringify(result.details, null, 2)}`);\n        }\n      }\n    } catch (error) {\n      logOutput(`\u274C Network Error: ${error.message}`, 'error');\n    }\n  }\n\n  // Listen for payment events\n  window.addEventListener('payment:success', (event) => {\n    logOutput('\u{1F389} Payment success event received!', 'success');\n    logOutput(`Details: ${JSON.stringify(event.detail, null, 2)}`);\n  });\n\n  // Initialize\n  document.addEventListener('DOMContentLoaded', () => {\n    logOutput('\u{1F680} M-Pesa test environment ready');\n    logOutput('\u{1F4A1} Use sandbox test numbers for testing');\n  });\n<\/script>"], ["", "  <script>\n  // Test Functions\n  function logOutput(message, type = 'info') {\n    const output = document.getElementById('test-output');\n    const timestamp = new Date().toLocaleTimeString();\n    const color = type === 'error' ? '#ff6b6b' : type === 'success' ? '#51cf66' : '#00ff00';\n    \n    output.innerHTML += \\`<div style=\"color: \\${color}; margin-bottom: 0.5rem;\">\n      [\\${timestamp}] \\${message}\n    </div>\\`;\n    output.scrollTop = output.scrollHeight;\n  }\n\n  function clearOutput() {\n    document.getElementById('test-output').innerHTML = '';\n  }\n\n  window.testPremiumPayment = async function(plan) {\n    clearOutput();\n    logOutput(\\`\u{1F3B5} Testing \\${plan} premium payment...\\`);\n    \n    const amounts = {\n      weekly: 99,\n      monthly: 299,\n      small: 1\n    };\n    \n    const duration = plan === 'weekly' ? '7 days' : '30 days';\n    \n    if (window.paymentModal) {\n      logOutput(\\`Opening payment modal for \\${plan} plan (KSh \\${amounts[plan]})\\`);\n      window.paymentModal.open({\n        type: 'music',\n        amount: amounts[plan],\n        duration: duration,\n        title: \\`Test \\${plan.charAt(0).toUpperCase() + plan.slice(1)} Premium Access\\`,\n        items: null\n      });\n    } else {\n      logOutput('\u274C Payment modal not available', 'error');\n    }\n  }\n\n  window.testMerchandisePayment = async function() {\n    clearOutput();\n    logOutput('\u{1F6CD}\uFE0F Testing merchandise payment...');\n    \n    const testItems = [\n      {\n        id: 'test-hoodie',\n        name: 'Test Hoodie',\n        price: 30,\n        quantity: 1,\n        size: 'M',\n        color: 'Black'\n      },\n      {\n        id: 'test-tshirt',\n        name: 'Test T-Shirt',\n        price: 20,\n        quantity: 1,\n        size: 'L',\n        color: 'Gold'\n      }\n    ];\n    \n    if (window.paymentModal) {\n      logOutput('Opening payment modal for test merchandise (KSh 50)');\n      window.paymentModal.open({\n        type: 'merchandise',\n        amount: 50,\n        items: testItems,\n        title: 'Test Merchandise Order'\n      });\n    } else {\n      logOutput('\u274C Payment modal not available', 'error');\n    }\n  }\n\n  window.testDirectAPI = async function() {\n    clearOutput();\n    logOutput('\u{1F527} Testing direct API call...');\n    \n    const phone = document.getElementById('test-phone').value;\n    const amount = parseInt(document.getElementById('test-amount').value);\n    const description = document.getElementById('test-desc').value;\n    \n    if (!phone || !amount) {\n      logOutput('\u274C Please fill in phone number and amount', 'error');\n      return;\n    }\n    \n    // Validate phone format\n    const phoneRegex = /^254[0-9]{9}$/;\n    if (!phoneRegex.test(phone)) {\n      logOutput('\u274C Invalid phone format. Use 254XXXXXXXXX', 'error');\n      return;\n    }\n    \n    try {\n      logOutput(\\`\u{1F4F1} Sending STK push to \\${phone} for KSh \\${amount}...\\`);\n      \n      const response = await fetch('/.netlify/functions/payment-gateway', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          phone: phone,\n          amount: amount,\n          type: 'test',\n          description: description\n        })\n      });\n      \n      const result = await response.json();\n      \n      if (response.ok && result.success) {\n        logOutput('\u2705 STK push sent successfully!', 'success');\n        logOutput(\\`\u{1F4CB} Checkout Request ID: \\${result.checkoutRequestId}\\`);\n        logOutput(\\`\u{1F4CB} Merchant Request ID: \\${result.merchantRequestId}\\`);\n        logOutput('\u{1F4F1} Check your phone to complete the payment');\n      } else {\n        logOutput(\\`\u274C API Error: \\${result.error || 'Unknown error'}\\`, 'error');\n        if (result.details) {\n          logOutput(\\`Details: \\${JSON.stringify(result.details, null, 2)}\\`);\n        }\n      }\n    } catch (error) {\n      logOutput(\\`\u274C Network Error: \\${error.message}\\`, 'error');\n    }\n  }\n\n  // Listen for payment events\n  window.addEventListener('payment:success', (event) => {\n    logOutput('\u{1F389} Payment success event received!', 'success');\n    logOutput(\\`Details: \\${JSON.stringify(event.detail, null, 2)}\\`);\n  });\n\n  // Initialize\n  document.addEventListener('DOMContentLoaded', () => {\n    logOutput('\u{1F680} M-Pesa test environment ready');\n    logOutput('\u{1F4A1} Use sandbox test numbers for testing');\n  });\n<\/script>"])), renderComponent($$result, "MainLayout", $$MainLayout, { "title": "M-Pesa Payment Test", "data-astro-cid-5eid6zir": true }, { "default": async ($$result2) => renderTemplate` ${maybeRenderHead()}<section class="test-section" data-astro-cid-5eid6zir> <div class="container" data-astro-cid-5eid6zir> <h1 data-astro-cid-5eid6zir>🧪 M-Pesa Sandbox Testing</h1> <p class="test-info" data-astro-cid-5eid6zir>Test the payment gateway with Safaricom sandbox credentials</p> <!-- Test Premium Payment --> <div class="test-card" data-astro-cid-5eid6zir> <h2 data-astro-cid-5eid6zir>🎵 Test Premium Music Payment</h2> <div class="test-options" data-astro-cid-5eid6zir> <button class="test-btn" onclick="testPremiumPayment('weekly')" data-astro-cid-5eid6zir>
Test Weekly (KSh 99)
</button> <button class="test-btn" onclick="testPremiumPayment('monthly')" data-astro-cid-5eid6zir>
Test Monthly (KSh 299)
</button> <button class="test-btn" onclick="testPremiumPayment('small')" data-astro-cid-5eid6zir>
Test Small Amount (KSh 1)
</button> </div> </div> <!-- Test Merchandise Payment --> <div class="test-card" data-astro-cid-5eid6zir> <h2 data-astro-cid-5eid6zir>🛍️ Test Merchandise Payment</h2> <div class="test-options" data-astro-cid-5eid6zir> <button class="test-btn" onclick="testMerchandisePayment()" data-astro-cid-5eid6zir>
Test Cart Payment (KSh 50)
</button> </div> </div> <!-- Direct API Test --> <div class="test-card" data-astro-cid-5eid6zir> <h2 data-astro-cid-5eid6zir>🔧 Direct API Test</h2> <div class="api-test-form" data-astro-cid-5eid6zir> <div class="form-group" data-astro-cid-5eid6zir> <label data-astro-cid-5eid6zir>Phone Number:</label> <input type="text" id="test-phone" value="254708374149" placeholder="254XXXXXXXXX" data-astro-cid-5eid6zir> </div> <div class="form-group" data-astro-cid-5eid6zir> <label data-astro-cid-5eid6zir>Amount (KSh):</label> <input type="number" id="test-amount" value="1" min="1" data-astro-cid-5eid6zir> </div> <div class="form-group" data-astro-cid-5eid6zir> <label data-astro-cid-5eid6zir>Description:</label> <input type="text" id="test-desc" value="Test Payment" placeholder="Payment description" data-astro-cid-5eid6zir> </div> <button class="test-btn primary" onclick="testDirectAPI()" data-astro-cid-5eid6zir>
Send STK Push
</button> </div> </div> <!-- Test Results --> <div class="test-results" data-astro-cid-5eid6zir> <h3 data-astro-cid-5eid6zir>📊 Test Results</h3> <div id="test-output" class="output-area" data-astro-cid-5eid6zir> <p data-astro-cid-5eid6zir>Click any test button to see results here...</p> </div> </div> <!-- Sandbox Info --> <div class="sandbox-info" data-astro-cid-5eid6zir> <h3 data-astro-cid-5eid6zir>📱 Sandbox Test Numbers</h3> <ul data-astro-cid-5eid6zir> <li data-astro-cid-5eid6zir><code data-astro-cid-5eid6zir>254708374149</code> - Success scenario</li> <li data-astro-cid-5eid6zir><code data-astro-cid-5eid6zir>254711082300</code> - Success scenario</li> <li data-astro-cid-5eid6zir><code data-astro-cid-5eid6zir>254700000000</code> - Timeout scenario</li> </ul> <p data-astro-cid-5eid6zir><strong data-astro-cid-5eid6zir>Note:</strong> Use amounts 1, 10, 100, or 1000 for testing</p> </div> </div> </section> ` }));
}, "C:/Users/User/CascadeProjects/the-gz-radio/src/pages/test-payment.astro", void 0);

const $$file = "C:/Users/User/CascadeProjects/the-gz-radio/src/pages/test-payment.astro";
const $$url = "/test-payment";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
  __proto__: null,
  default: $$TestPayment,
  file: $$file,
  url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
