---
import MainLayout from '@/layouts/MainLayout.astro';
import AudioPlayer from '@/components/AudioPlayer.astro';
import tracks from '@/data/tracks.json';
---

<MainLayout title="Listen - G'z Radio" showFooter={false}>
  <section class="immersive-listen-section">
    <!-- Minimal Navigation -->
    <div class="minimal-nav">
      <a href="/" class="back-btn" title="Back to Main">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
          <path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"/>
        </svg>
      </a>
      <button class="track-menu-btn" title="Track Library">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
          <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
        </svg>
      </button>
    </div>

    <!-- Full 3D Immersive Visual Experience -->
    <div class="visual-mode active">
      <AudioPlayer tracks={tracks} />
    </div>

    <!-- 3D Floating Track Menu -->
    <div class="floating-track-menu" id="trackMenu">
      <div class="track-menu-header">
        <h3>Available Tracks</h3>
        <button class="close-menu-btn" id="closeMenu">Ã—</button>
      </div>
      <div class="track-list-3d">
        {tracks.map((track, index) => (
          <div class="track-item-3d" data-track-index={index} data-track-id={track.id}>
            <div class="track-cover-3d">
              <img src={track.cover} alt={track.title} />
            </div>
            <div class="track-details-3d">
              <span class="track-title-3d">{track.title}</span>
              <span class="track-artist-3d">{track.artist}</span>
              <span class="track-duration-3d">{track.duration}</span>
            </div>
            <div class="track-actions-3d">
              <button class="play-btn-3d" data-track-index={index} title="Play Track">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M8 5v14l11-7z"/>
                </svg>
              </button>
              <button class="buy-btn-3d" data-track-id={track.id} data-track-title={track.title} data-track-artist={track.artist} title="Buy Track">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z"/>
                </svg>
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  </section>
</MainLayout>

<style>
  .immersive-listen-section {
    min-height: 100vh;
    width: 100%;
    position: relative;
    overflow: hidden;
    background: radial-gradient(circle at center, #1a1a1a 0%, #0a0a0a 100%);
  }

  /* Minimal Navigation */
  .minimal-nav {
    position: fixed;
    top: 2rem;
    left: 2rem;
    z-index: 100;
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .back-btn, .track-menu-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 44px;
    height: 44px;
    background: rgba(0, 0, 0, 0.4);
    border: 1px solid rgba(255, 215, 0, 0.2);
    border-radius: 50%;
    color: var(--accent-color-static);
    text-decoration: none;
    cursor: pointer;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
  }

  .back-btn:hover, .track-menu-btn:hover {
    background: rgba(255, 215, 0, 0.1);
    border-color: var(--accent-color-static);
    transform: translateY(-1px);
  }

  /* Clean Track Menu */
  .floating-track-menu {
    position: fixed;
    top: 50%;
    left: 50%;
    width: 90%;
    max-width: 500px;
    max-height: 70vh;
    background: rgba(0, 0, 0, 0.95);
    border: 1px solid rgba(255, 215, 0, 0.2);
    border-radius: 12px;
    backdrop-filter: blur(20px);
    transform: translate(-50%, -50%) scale(0.95);
    z-index: 200;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
  }

  .floating-track-menu.active {
    opacity: 1;
    visibility: visible;
    transform: translate(-50%, -50%) scale(1);
  }

  .track-menu-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem 2rem;
    border-bottom: 1px solid rgba(255, 215, 0, 0.2);
  }

  .track-menu-header h3 {
    color: var(--accent-color-static);
    margin: 0;
    font-size: 1.5rem;
    text-shadow: 0 0 10px rgba(255, 215, 0, 0.3);
  }

  .close-menu-btn {
    background: none;
    border: none;
    color: var(--accent-color-static);
    font-size: 2rem;
    cursor: pointer;
    transition: all 0.3s ease;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
  }

  .close-menu-btn:hover {
    background: rgba(255, 215, 0, 0.1);
    transform: scale(1.1) rotateZ(90deg);
  }

  .track-list-3d {
    padding: 1rem;
    max-height: 60vh;
    overflow-y: auto;
    scrollbar-width: thin;
    scrollbar-color: rgba(255, 215, 0, 0.3) transparent;
  }

  .track-list-3d::-webkit-scrollbar {
    width: 6px;
  }

  .track-list-3d::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 3px;
  }

  .track-list-3d::-webkit-scrollbar-thumb {
    background: rgba(255, 215, 0, 0.3);
    border-radius: 3px;
  }

  .track-item-3d {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 0.75rem;
    margin-bottom: 0.25rem;
    background: rgba(255, 255, 255, 0.02);
    border-radius: 8px;
    transition: all 0.2s ease;
    cursor: pointer;
  }

  .track-item-3d:hover {
    background: rgba(255, 215, 0, 0.03);
    transform: translateX(4px);
  }

  .track-cover-3d {
    width: 40px;
    height: 40px;
    border-radius: 6px;
    overflow: hidden;
    border: 1px solid rgba(255, 215, 0, 0.1);
  }

  .track-cover-3d img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: opacity 0.2s ease;
  }

  .track-item-3d:hover .track-cover-3d img {
    opacity: 0.9;
  }

  .track-details-3d {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .track-title-3d {
    color: var(--text-color);
    font-weight: 600;
    font-size: 1rem;
  }

  .track-artist-3d {
    color: rgba(255, 255, 255, 0.7);
    font-size: 0.9rem;
  }

  .track-duration-3d {
    color: var(--accent-color-static);
    font-size: 0.8rem;
    font-family: monospace;
  }

  .track-actions-3d {
    display: flex;
    gap: 0.5rem;
  }

  .play-btn-3d, .buy-btn-3d {
    width: 28px;
    height: 28px;
    border: none;
    border-radius: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .play-btn-3d {
    background: var(--accent-color-static);
    color: #000;
  }

  .play-btn-3d:hover {
    opacity: 0.8;
  }

  .buy-btn-3d {
    background: rgba(255, 255, 255, 0.05);
    color: var(--accent-color-static);
    border: 1px solid rgba(255, 215, 0, 0.2);
  }

  .buy-btn-3d:hover {
    background: rgba(255, 215, 0, 0.1);
  }

  /* Smooth 2D Visual Mode */
  .visual-mode {
    display: block;
    min-height: 100vh;
    width: 100%;
    padding: 0;
    box-sizing: border-box;
    animation: smoothEntry 0.8s ease-out;
  }

  @keyframes smoothEntry {
    from { 
      opacity: 0; 
      transform: translateY(20px);
    }
    to { 
      opacity: 1; 
      transform: translateY(0px);
    }
  }

  /* Subtle Background Effects */
  .immersive-listen-section::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: 
      radial-gradient(circle at 30% 70%, rgba(255, 215, 0, 0.03) 0%, transparent 40%),
      radial-gradient(circle at 70% 30%, rgba(255, 165, 0, 0.02) 0%, transparent 40%);
    animation: subtleGlow 6s ease-in-out infinite alternate;
  }

  @keyframes subtleGlow {
    0% { opacity: 0.4; }
    100% { opacity: 0.7; }
  }

  /* Mobile Responsiveness */
  @media (max-width: 768px) {
    .minimal-nav {
      top: 1rem;
      left: 1rem;
    }

    .back-btn {
      width: 45px;
      height: 45px;
    }

    .visual-mode {
      perspective: 800px;
    }
  }

  @media (max-width: 480px) {
    .back-btn {
      width: 40px;
      height: 40px;
    }

    .visual-mode {
      perspective: 600px;
    }
  }
</style>

<script>
  // 3D Immersive Audio Experience with Track Menu
  document.addEventListener('DOMContentLoaded', () => {
    // Enhanced 3D visual effects for the audio player
    const visualMode = document.querySelector('.visual-mode');
    const trackMenuBtn = document.querySelector('.track-menu-btn');
    const trackMenu = document.getElementById('trackMenu');
    const closeMenuBtn = document.getElementById('closeMenu');
    
    // Track menu toggle functionality
    trackMenuBtn.addEventListener('click', () => {
      trackMenu.classList.add('active');
    });
    
    closeMenuBtn.addEventListener('click', () => {
      trackMenu.classList.remove('active');
    });
    
    // Close menu when clicking outside
    trackMenu.addEventListener('click', (e) => {
      if (e.target === trackMenu) {
        trackMenu.classList.remove('active');
      }
    });
    
    // Initialize track interactions
    initializeTrackActions();
    
    // Enhanced 2D audio-reactive visualizations
    if (window.audioPlayer) {
      // Listen for comprehensive audio analysis
      window.addEventListener('audioVisualization', (event) => {
        const { bassLevel, midLevel, trebleLevel, volume, rhythm } = event.detail;
        
        // Smooth background color shifts based on frequency dominance
        const backgroundHue = bassLevel > 0.6 ? 45 : midLevel > 0.6 ? 35 : 25; // Gold variations
        const backgroundSaturation = Math.min(volume * 100, 30);
        
        document.documentElement.style.setProperty(
          '--dynamic-bg', 
          `hsl(${backgroundHue}, ${backgroundSaturation}%, 8%)`
        );
        
        // Subtle scale animation for rhythm
        if (rhythm && rhythm > 0.7) {
          visualMode.style.transform = `scale(${1 + rhythm * 0.02})`;
          setTimeout(() => {
            visualMode.style.transform = 'scale(1)';
          }, 100);
        }
        
        // Update particle intensity
        updateParticleIntensity(bassLevel, midLevel, trebleLevel);
      });
    }

    // Add floating particle effects
    createFloatingParticles();
    
    // Enhanced depth-of-field blur effects
    addDepthEffects();
  });

  function initializeTrackActions() {
    const playButtons = document.querySelectorAll('.play-btn-3d');
    const buyButtons = document.querySelectorAll('.buy-btn-3d');
    const trackMenu = document.getElementById('trackMenu');
    
    playButtons.forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.stopPropagation();
        const trackIndex = parseInt(btn.dataset.trackIndex);
        
        if (window.audioPlayer) {
          window.audioPlayer.playTrack(trackIndex);
          // Close menu after selecting track
          trackMenu.classList.remove('active');
        }
      });
    });

    buyButtons.forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.stopPropagation();
        const trackId = btn.dataset.trackId;
        const trackTitle = btn.dataset.trackTitle;
        const trackArtist = btn.dataset.trackArtist;
        
        if (window.paymentModal) {
          window.paymentModal.open({
            type: 'track',
            amount: 50,
            trackId: trackId,
            title: `Buy "${trackTitle}"`,
            trackTitle: trackTitle,
            trackArtist: trackArtist,
            items: null
          });
        }
      });
    });
  }

  function createFloatingParticles() {
    const particleContainer = document.createElement('div');
    particleContainer.className = 'particle-container';
    particleContainer.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
      z-index: 1;
    `;
    
    document.body.appendChild(particleContainer);
    
    // Create subtle floating particles
    for (let i = 0; i < 20; i++) {
      const particle = document.createElement('div');
      particle.className = 'audio-particle';
      particle.style.cssText = `
        position: absolute;
        width: ${Math.random() * 2 + 1}px;
        height: ${Math.random() * 2 + 1}px;
        background: rgba(255, 215, 0, ${Math.random() * 0.3 + 0.1});
        border-radius: 50%;
        left: ${Math.random() * 100}%;
        top: ${Math.random() * 100}%;
        animation: smoothFloat ${Math.random() * 8 + 12}s infinite ease-in-out;
        opacity: 0.6;
      `;
      particleContainer.appendChild(particle);
    }
  }

  function updateParticleIntensity(bass, mid, treble) {
    const particles = document.querySelectorAll('.audio-particle');
    const intensity = (bass + mid + treble) / 3;
    
    particles.forEach((particle, index) => {
      const baseOpacity = 0.6;
      const dynamicOpacity = baseOpacity + (intensity * 0.4);
      particle.style.opacity = Math.min(dynamicOpacity, 1);
      
      // Vary particle response based on frequency
      if (index % 3 === 0) particle.style.opacity = Math.min(baseOpacity + (bass * 0.5), 1);
      else if (index % 3 === 1) particle.style.opacity = Math.min(baseOpacity + (mid * 0.5), 1);
      else particle.style.opacity = Math.min(baseOpacity + (treble * 0.5), 1);
    });
  }

  function addDepthEffects() {
    const style = document.createElement('style');
    style.textContent = `
      @keyframes smoothFloat {
        0%, 100% {
          transform: translateY(0px) translateX(0px);
          opacity: 0.4;
        }
        25% {
          transform: translateY(-20px) translateX(10px);
          opacity: 0.8;
        }
        50% {
          transform: translateY(-10px) translateX(-5px);
          opacity: 0.6;
        }
        75% {
          transform: translateY(-30px) translateX(15px);
          opacity: 0.9;
        }
      }
      
      .immersive-listen-section {
        background: var(--dynamic-bg, radial-gradient(circle at center, #1a1a1a 0%, #0a0a0a 100%));
        transition: background 0.5s ease;
      }
    `;
    document.head.appendChild(style);
  }
</script>
