---
import MainLayout from '@/layouts/MainLayout.astro';
import clothing from '@/data/clothing.json';

export async function getStaticPaths() {
  return clothing.map((item) => ({
    params: { slug: item.slug },
    props: { product: item },
  }));
}

const { product } = Astro.props;
---

<MainLayout title={`${product.name} - G'z Radio`}>
  <section class="product-page fade-in-section">
    <a href="/" class="back-link">‚Üê Back to Main</a>
    
    <div class="product-container">
      <div class="product-gallery">
        <div class="main-image">
          <img id="mainProductImage" src={product.images[0]} alt={product.name} />
        </div>
        {product.images.length > 1 && (
          <div class="thumbnails">
            {product.images.map((image, index) => (
              <button class={`thumb ${index === 0 ? 'active' : ''}`} data-image={image}>
                <img src={image} alt={`${product.name} ${index + 1}`} />
              </button>
            ))}
          </div>
        )}
      </div>

      <div class="product-details">
        <h1>{product.name}</h1>
        <div class="price-line"></div>
        <p class="price">{product.price.toFixed(2)} {product.currency}</p>
        
        <div class="options">
          <div class="option-group">
            <span class="option-label">Size</span>
            <div class="size-grid">
              {product.sizes.map((size, index) => (
                <button class={`size-option ${index === 0 ? 'selected' : ''}`} data-size={size}>
                  {size}
                </button>
              ))}
            </div>
          </div>

          <div class="option-group">
            <span class="option-label">Color</span>
            <div class="color-grid">
              {product.colors.map((color, index) => (
                <button 
                  class={`color-option ${index === 0 ? 'selected' : ''}`}
                  data-color={color.name}
                  style={`background: ${color.hex}`}
                  title={color.name}
                ></button>
              ))}
            </div>
          </div>
        </div>

        <div class="stock-status">
          {product.inStock ? (
            <span class="available">Available</span>
          ) : (
            <span class="unavailable">Out of Stock</span>
          )}
        </div>

        <button 
          class="add-to-cart" 
          data-product-id={product.id}
          disabled={!product.inStock}
        >
          {product.inStock ? 'Add to Cart' : 'Unavailable'}
        </button>
      </div>
    </div>
  </section>
</MainLayout>

<style>
  .product-page {
    min-height: 100vh;
    padding: 2rem;
    background: linear-gradient(135deg, #0a0a0a 0%, #1a1a1a 100%);
  }

  .back-link {
    display: inline-flex;
    align-items: center;
    color: var(--accent-color-static);
    text-decoration: none;
    font-weight: 600;
    margin-bottom: 3rem;
    transition: all 0.3s ease;
    font-size: 1.1rem;
  }

  .back-link:hover {
    color: #fff;
    transform: translateX(-5px);
  }

  .product-container {
    max-width: 1200px;
    margin: 0 auto;
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 4rem;
    align-items: start;
  }

  .product-gallery {
    position: sticky;
    top: 2rem;
  }

  .main-image {
    width: 100%;
    aspect-ratio: 1;
    border-radius: 20px;
    overflow: hidden;
    background: #000;
    margin-bottom: 1rem;
  }

  .main-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .main-image:hover img {
    transform: scale(1.02);
  }

  .thumbnails {
    display: flex;
    gap: 0.8rem;
    justify-content: center;
  }

  .thumb {
    width: 60px;
    height: 60px;
    border-radius: 8px;
    overflow: hidden;
    border: 2px solid transparent;
    background: none;
    cursor: pointer;
    transition: all 0.3s ease;
    opacity: 0.6;
  }

  .thumb.active {
    border-color: var(--accent-color-static);
    opacity: 1;
  }

  .thumb:hover {
    opacity: 1;
    transform: scale(1.05);
  }

  .thumb img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .product-details {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .product-details h1 {
    font-family: 'Anton', sans-serif;
    font-size: clamp(2rem, 5vw, 3.5rem);
    color: var(--accent-color-static);
    margin: 0;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    line-height: 1.1;
  }

  .price-line {
    width: 60px;
    height: 2px;
    background: linear-gradient(45deg, var(--accent-color-static), #ffa500);
    margin: 0.5rem 0;
  }

  .price {
    font-size: 1.8rem;
    font-weight: 300;
    color: #fff;
    margin: 0;
    letter-spacing: 0.02em;
  }

  .options {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .option-group {
    display: flex;
    flex-direction: column;
    gap: 0.8rem;
  }

  .option-label {
    font-size: 0.9rem;
    color: var(--accent-color-static);
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.1em;
  }

  .size-grid {
    display: flex;
    gap: 0.6rem;
    flex-wrap: wrap;
  }

  .size-option {
    padding: 0.8rem 1.2rem;
    border: 1px solid rgba(255, 255, 255, 0.2);
    background: transparent;
    color: #fff;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-weight: 500;
    min-width: 50px;
    text-align: center;
  }

  .size-option:hover,
  .size-option.selected {
    border-color: var(--accent-color-static);
    color: var(--accent-color-static);
    background: rgba(255, 215, 0, 0.05);
  }

  .color-grid {
    display: flex;
    gap: 0.8rem;
  }

  .color-option {
    width: 35px;
    height: 35px;
    border-radius: 50%;
    border: 2px solid transparent;
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
  }

  .color-option:hover,
  .color-option.selected {
    border-color: var(--accent-color-static);
    transform: scale(1.1);
    box-shadow: 0 0 15px rgba(255, 215, 0, 0.3);
  }

  .stock-status {
    padding: 1rem 0;
  }

  .available {
    color: #4ade80;
    font-weight: 500;
    font-size: 0.95rem;
  }

  .unavailable {
    color: #f87171;
    font-weight: 500;
    font-size: 0.95rem;
  }

  .add-to-cart {
    padding: 1.2rem 2rem;
    background: linear-gradient(45deg, var(--accent-color-static), #ffa500);
    border: none;
    border-radius: 8px;
    color: #000;
    font-weight: 600;
    font-size: 1.1rem;
    cursor: pointer;
    transition: all 0.3s ease;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin-top: 1rem;
  }

  .add-to-cart:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 10px 30px rgba(255, 215, 0, 0.3);
  }

  .add-to-cart:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    background: rgba(255, 255, 255, 0.1);
    color: rgba(255, 255, 255, 0.5);
  }

  /* Responsive Design */
  @media (max-width: 1024px) {
    .product-container {
      gap: 3rem;
    }
  }

  @media (max-width: 768px) {
    .product-page {
      padding: 1rem;
    }

    .product-container {
      grid-template-columns: 1fr;
      gap: 2rem;
    }

    .product-gallery {
      position: static;
    }

    .back-link {
      margin-bottom: 2rem;
      font-size: 1rem;
    }

    .product-details h1 {
      font-size: clamp(1.8rem, 8vw, 2.5rem);
    }

    .price {
      font-size: 1.5rem;
    }

    .options {
      gap: 1.5rem;
    }

    .thumbnails {
      gap: 0.6rem;
    }

    .thumb {
      width: 50px;
      height: 50px;
    }
  }

  @media (max-width: 480px) {
    .product-page {
      padding: 0.8rem;
    }

    .product-container {
      gap: 1.5rem;
    }

    .product-details {
      gap: 1.5rem;
    }

    .product-details h1 {
      font-size: clamp(1.5rem, 10vw, 2rem);
    }

    .price {
      font-size: 1.3rem;
    }

    .size-option {
      padding: 0.7rem 1rem;
      font-size: 0.9rem;
    }

    .color-option {
      width: 30px;
      height: 30px;
    }

    .add-to-cart {
      padding: 1rem 1.5rem;
      font-size: 1rem;
    }

    .thumbnails {
      gap: 0.4rem;
    }

    .thumb {
      width: 45px;
      height: 45px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const mainImage = document.getElementById('mainProductImage');
    const thumbnails = document.querySelectorAll('.thumb');
    const addToCartBtn = document.querySelector('.add-to-cart');

    // Image thumbnail functionality
    thumbnails.forEach(thumbnail => {
      thumbnail.addEventListener('click', () => {
        const newImageSrc = thumbnail.dataset.image;
        if (mainImage && newImageSrc) {
          mainImage.src = newImageSrc;
          
          // Update active thumbnail
          thumbnails.forEach(t => t.classList.remove('active'));
          thumbnail.classList.add('active');
        }
      });
    });

    // Size selection
    const sizeButtons = document.querySelectorAll('.size-option');
    sizeButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        sizeButtons.forEach(b => b.classList.remove('selected'));
        btn.classList.add('selected');
      });
    });

    // Color selection
    const colorOptions = document.querySelectorAll('.color-option');
    colorOptions.forEach(option => {
      option.addEventListener('click', () => {
        colorOptions.forEach(o => o.classList.remove('selected'));
        option.classList.add('selected');
      });
    });

    // Add to cart functionality
    if (addToCartBtn) {
      addToCartBtn.addEventListener('click', () => {
        // Get selected size and color
        const selectedSize = document.querySelector('.size-option.selected')?.dataset.size;
        const selectedColor = document.querySelector('.color-option.selected')?.dataset.color;

        if (!selectedSize || !selectedColor) {
          alert('Please select both size and color before adding to cart.');
          return;
        }

        // Get product data from the page
        const productData = {
          id: addToCartBtn.dataset.productId,
          name: document.querySelector('.product-details h1').textContent,
          price: parseFloat(document.querySelector('.price').textContent.replace(/[^0-9.]/g, '')),
          images: [document.getElementById('mainProductImage').src],
          slug: window.location.pathname.split('/').pop()
        };

        // Add to cart using the global cart instance
        if (window.cart) {
          window.cart.addItem(productData, selectedSize, selectedColor, 1);
          
          // Update button temporarily
          const originalText = addToCartBtn.textContent;
          addToCartBtn.textContent = 'Added!';
          addToCartBtn.style.background = 'linear-gradient(45deg, #4ade80, #22c55e)';
          
          setTimeout(() => {
            addToCartBtn.textContent = originalText;
            addToCartBtn.style.background = 'linear-gradient(45deg, var(--accent-color-static), #ffa500)';
          }, 2000);
        } else {
          console.error('Cart system not available');
          alert('Cart system not available. Please try again.');
        }
      });
    }
  });
</script>
