---
// Placeholder content
const brandDescription = "Your source for the realest sounds in the game. Curated vibes, no skips. This is The G'z Radio.";
---

<section id="hero">
  <video autoplay muted loop playsinline class="hero-video">
    <source src="/assets/gallery/sikua_na_rada_1.mp4" type="video/mp4">
  </video>
  <div class="hero-content">
    <h1 class="rubik-glitch-regular" data-text="The G'z Radio">The G'z Radio</h1>
    <a href="/shop" class="press-play-btn">Press Play</a>
  </div>
</section>

<style>
  @import url('https://fonts.googleapis.com/css2?family=Rubik+Glitch&display=swap');

  #hero {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    padding: 2rem;
    position: relative;
    overflow: hidden;
    background-color: #000;
  }

  .hero-video {
    position: absolute;
    top: 50%;
    left: 50%;
    min-width: 100%;
    min-height: 100%;
    width: auto;
    height: auto;
    transform: translate(-50%, -50%);
    object-fit: cover;
    z-index: 0;
  }

  /* Responsive video adjustments */
  @media (max-width: 768px) {
    .hero-video {
      /* Ensure video covers on tablets */
      width: 100%;
      height: 100%;
    }

    .hero-content h1 {
      font-size: clamp(2rem, 8vw, 3rem);
      text-shadow: 3px 3px 15px rgba(0,0,0,0.8);
    }
  }

  @media (max-width: 480px) {
    #hero {
      padding: 1rem;
    }

    .hero-video {
      /* On mobile, prioritize width coverage */
      width: 100%;
      min-height: 100vh;
    }

    .hero-content h1 {
      font-size: clamp(1.75rem, 10vw, 2.5rem);
      text-shadow: 4px 4px 20px rgba(0,0,0,0.9);
    }
  }

  /* Landscape mobile devices */
  @media (max-width: 768px) and (orientation: landscape) {
    .hero-video {
      width: auto;
      height: 100%;
      min-width: 100vw;
    }
  }

  .hero-content {
    max-width: 800px;
    margin: 0 auto;
    color: var(--secondary-color);
    position: relative;
    z-index: 1;
  }

  .rubik-glitch-regular {
    font-family: "Rubik Glitch", system-ui !important;
    font-weight: 400;
    font-style: normal;
    font-size: clamp(3rem, 10vw, 6rem);
    margin-bottom: 2rem;
    color: var(--accent-color-static);
    text-shadow: 2px 2px 10px rgba(0,0,0,0.5);
    letter-spacing: 0.05em;
    transform: rotate(-2deg) skewX(-5deg);
    display: inline-block;
  }

  .press-play-btn {
    display: inline-block;
    padding: 0.75rem 2rem;
    background: transparent;
    border: 2px solid var(--accent-color-static);
    color: var(--accent-color-static);
    text-decoration: none;
    text-transform: uppercase;
    letter-spacing: 2px;
    font-size: 0.875rem;
    font-weight: 600;
    font-family: var(--font-body);
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .press-play-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: var(--accent-color-static);
    transition: left 0.3s ease;
    z-index: -1;
  }

  .press-play-btn:hover {
    color: #000;
    border-color: var(--accent-color-static);
    box-shadow: 0 0 20px rgba(212, 175, 55, 0.5);
  }

  .press-play-btn:hover::before {
    left: 0;
  }

  .press-play-btn.animating {
    color: #000;
    pointer-events: none;
  }

  .press-play-btn.animating::before {
    left: 0;
  }

  .hero-content p {
    font-size: 1.2rem;
    max-width: 600px;
    margin: 0 auto;
    color: var(--secondary-color);
  }

  .scroll-down-indicator {
    position: absolute;
    bottom: 2rem;
    writing-mode: vertical-rl;
    text-orientation: mixed;
    font-family: var(--font-body);
    font-weight: 700;
    font-size: 0.8rem;
    letter-spacing: 2px;
    color: var(--secondary-color);
    opacity: 0.7;
  }
</style>

<script>
  document.addEventListener('scroll', () => {
    const heroSection = document.querySelector('.hero-section') as HTMLElement;
    if (heroSection) {
      const scrollPosition = window.scrollY;
      heroSection.style.backgroundPositionY = `${scrollPosition * 0.5}px`;
    }
  });

  // Handle Press Play button with animation delay
  const pressPlayBtn = document.querySelector('.press-play-btn') as HTMLAnchorElement;
  if (pressPlayBtn) {
    pressPlayBtn.addEventListener('click', (e) => {
      e.preventDefault();
      const href = pressPlayBtn.getAttribute('href');
      
      // Add active class for animation
      pressPlayBtn.classList.add('animating');
      
      // Navigate after animation completes (300ms)
      setTimeout(() => {
        if (href) {
          window.location.href = href;
        }
      }, 400);
    });
  }
</script>
