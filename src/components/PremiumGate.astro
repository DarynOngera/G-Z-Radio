---
// Premium Music Access Gate Component
import tracks from '@/data/tracks.json';
---

<div id="premium-gate" class="premium-gate">
  <div class="premium-content">
    <div class="premium-icon">ðŸŽµ</div>
    <h2>Premium Music Access</h2>
    <p>Unlock exclusive tracks and high-quality streaming</p>
    
    <!-- Song Previews Section -->
    <div class="song-previews">
      <h3>ðŸŽ§ Preview Our Exclusive Tracks</h3>
      
      <!-- Single Track Player -->
      <div class="single-track-player">
        <div class="track-display">
          <div class="track-info">
            <h4 class="current-track-title">Freestab</h4>
            <p class="current-track-artist">G'z Radio</p>
            <p class="current-track-description">A smooth freestyle track showcasing lyrical prowess</p>
          </div>
          
          <!-- Audio Visualization -->
          <div class="audio-visualizer">
            <canvas id="audioCanvas" width="400" height="120"></canvas>
            <div class="visualizer-overlay">
              <button class="main-play-btn" id="mainPlayBtn">
                <span class="play-icon">
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M8 5v14l11-7z"/>
                  </svg>
                </span>
                <span class="pause-icon" style="display: none;">
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/>
                  </svg>
                </span>
              </button>
            </div>
          </div>
          
          <!-- Track Controls -->
          <div class="track-controls">
            <div class="time-display">
              <span class="current-time">0:00</span>
              <span class="separator">/</span>
              <span class="total-time">0:30</span>
            </div>
            <div class="track-navigation">
              <button class="nav-btn prev-btn" id="prevBtn">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M6 6h2v12H6zm3.5 6l8.5 6V6z"/>
                </svg>
              </button>
              <span class="track-counter">
                <span class="current-track-num">1</span> of <span class="total-tracks">{tracks.length}</span>
              </span>
              <button class="nav-btn next-btn" id="nextBtn">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M6 18l8.5-6L6 6v12zM16 6v12h2V6h-2z"/>
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>
      
      <p class="preview-note">ðŸ”’ Full tracks available with Premium Access â€¢ 30s previews only</p>
    </div>
    
    <div class="premium-features">
      <div class="feature">
        <span class="feature-icon">âœ¨</span>
        <span>Unlimited streaming</span>
      </div>
      <div class="feature">
        <span class="feature-icon">ðŸŽ§</span>
        <span>High-quality audio</span>
      </div>
      <div class="feature">
        <span class="feature-icon">ðŸ“±</span>
        <span>Mobile & desktop access</span>
      </div>
      <div class="feature">
        <span class="feature-icon">ðŸš«</span>
        <span>Ad-free experience</span>
      </div>
    </div>
    
    <div class="pricing-options">
      <div class="pricing-card active" data-plan="monthly">
        <div class="plan-header">
          <h3>Monthly Access</h3>
          <div class="price">
            <span class="currency">KSh</span>
            <span class="amount">299</span>
            <span class="period">/month</span>
          </div>
        </div>
        <p class="plan-desc">Perfect for casual listeners</p>
      </div>
      
      <div class="pricing-card" data-plan="weekly">
        <div class="plan-header">
          <h3>Weekly Access</h3>
          <div class="price">
            <span class="currency">KSh</span>
            <span class="amount">99</span>
            <span class="period">/week</span>
          </div>
        </div>
        <p class="plan-desc">Try premium features</p>
      </div>
    </div>
    
    <button id="get-premium-btn" class="premium-btn">
      <span class="btn-text">Get Premium Access</span>
      <span class="btn-price">KSh 299/month</span>
    </button>
    
    <div class="premium-footer">
      <p>Secure payment via M-Pesa â€¢ Cancel anytime</p>
    </div>
  </div>
</div>

<style>
  .premium-gate {
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 60vh;
    padding: 2rem;
    text-align: center;
  }

  .premium-content {
    max-width: 500px;
    background: linear-gradient(135deg, rgba(20, 20, 20, 0.9), rgba(40, 40, 40, 0.9));
    border: 1px solid rgba(255, 215, 0, 0.3);
    border-radius: 20px;
    padding: 3rem 2rem;
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
  }

  .premium-icon {
    font-size: 4rem;
    margin-bottom: 1rem;
    filter: drop-shadow(0 0 20px rgba(255, 215, 0, 0.5));
  }

  .premium-content h2 {
    color: var(--accent-color-static);
    font-size: 2.5rem;
    margin: 0 0 1rem 0;
    font-weight: 700;
    text-shadow: 0 0 20px rgba(255, 215, 0, 0.3);
  }

  .premium-content p {
    color: var(--text-color);
    font-size: 1.2rem;
    margin-bottom: 2rem;
    opacity: 0.9;
  }

  .premium-features {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
    margin-bottom: 2rem;
  }

  .feature {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 8px;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }

  .feature-icon {
    font-size: 1.2rem;
  }

  .feature span:last-child {
    color: var(--text-color);
    font-size: 0.9rem;
  }

  .pricing-options {
    display: flex;
    gap: 1rem;
    margin-bottom: 2rem;
  }

  .pricing-card {
    flex: 1;
    background: rgba(255, 255, 255, 0.05);
    border: 2px solid rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    padding: 1.5rem 1rem;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .pricing-card:hover {
    border-color: rgba(255, 215, 0, 0.5);
    transform: translateY(-2px);
  }

  .pricing-card.active {
    border-color: var(--accent-color-static);
    background: rgba(255, 215, 0, 0.1);
  }

  .plan-header h3 {
    color: var(--text-color);
    font-size: 1.1rem;
    margin: 0 0 0.5rem 0;
    font-weight: 600;
  }

  .price {
    display: flex;
    align-items: baseline;
    justify-content: center;
    gap: 0.2rem;
    margin-bottom: 0.5rem;
  }

  .currency {
    color: var(--accent-color-static);
    font-size: 0.9rem;
    font-weight: 600;
  }

  .amount {
    color: var(--accent-color-static);
    font-size: 2rem;
    font-weight: 700;
  }

  .period {
    color: rgba(255, 255, 255, 0.7);
    font-size: 0.8rem;
  }

  .plan-desc {
    color: rgba(255, 255, 255, 0.7);
    font-size: 0.8rem;
    margin: 0;
  }

  .premium-btn {
    background: linear-gradient(45deg, var(--accent-color-static), #ffa500);
    color: #000;
    border: none;
    padding: 1rem 2rem;
    border-radius: 12px;
    font-size: 1.1rem;
    font-weight: 700;
    cursor: pointer;
    transition: all 0.3s ease;
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.2rem;
    margin-bottom: 1.5rem;
  }

  .premium-btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 30px rgba(255, 215, 0, 0.4);
  }

  .btn-text {
    font-size: 1.1rem;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .btn-price {
    font-size: 0.9rem;
    opacity: 0.8;
  }

  .premium-footer {
    color: rgba(255, 255, 255, 0.6);
    font-size: 0.8rem;
  }

  .premium-footer p {
    margin: 0;
    font-size: 0.8rem;
  }

  /* Song Previews Styles */
  .song-previews {
    margin: 2rem 0;
    padding: 2rem;
    background: rgba(0, 0, 0, 0.3);
    border-radius: 16px;
    border: 1px solid rgba(255, 215, 0, 0.2);
  }

  .song-previews h3 {
    color: var(--accent-color-static);
    text-align: center;
    margin-bottom: 2rem;
    font-size: 1.3rem;
    font-weight: 600;
  }

  /* Single Track Player Styles */
  .single-track-player {
    max-width: 500px;
    margin: 0 auto;
  }

  .track-display {
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 16px;
    padding: 2rem;
    transition: all 0.3s ease;
  }

  .track-display:hover {
    border-color: rgba(255, 215, 0, 0.3);
    box-shadow: 0 8px 30px rgba(255, 215, 0, 0.1);
  }

  .track-info {
    text-align: center;
    margin-bottom: 2rem;
  }

  .current-track-title {
    color: var(--accent-color-static);
    font-size: 1.5rem;
    font-weight: 700;
    margin: 0 0 0.5rem 0;
    text-shadow: 0 0 10px rgba(255, 215, 0, 0.3);
  }

  .current-track-artist {
    color: rgba(255, 255, 255, 0.9);
    font-size: 1.1rem;
    margin: 0 0 1rem 0;
    font-weight: 500;
  }

  .current-track-description {
    color: rgba(255, 255, 255, 0.7);
    font-size: 0.95rem;
    margin: 0;
    line-height: 1.5;
    font-style: italic;
  }

  /* Audio Visualizer Styles */
  .audio-visualizer {
    position: relative;
    background: rgba(0, 0, 0, 0.4);
    border-radius: 12px;
    margin: 2rem 0;
    overflow: hidden;
    border: 1px solid rgba(255, 215, 0, 0.2);
  }

  #audioCanvas {
    width: 100%;
    height: 120px;
    display: block;
    background: linear-gradient(135deg, rgba(255, 215, 0, 0.1), rgba(255, 165, 0, 0.1));
  }

  .visualizer-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(0, 0, 0, 0.3);
    transition: opacity 0.3s ease;
  }

  .main-play-btn {
    background: linear-gradient(45deg, var(--accent-color-static), #ffa500);
    border: none;
    border-radius: 50%;
    width: 70px;
    height: 70px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 2rem;
    box-shadow: 0 4px 20px rgba(255, 215, 0, 0.3);
  }

  .main-play-btn:hover {
    transform: scale(1.1);
    box-shadow: 0 6px 30px rgba(255, 215, 0, 0.5);
  }

  .main-play-btn:active {
    transform: scale(0.95);
  }

  .loading-spinner {
    width: 20px;
    height: 20px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-top: 2px solid currentColor;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  /* Track Controls */
  .track-controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 1.5rem;
  }

  .time-display {
    color: rgba(255, 255, 255, 0.8);
    font-family: monospace;
    font-size: 0.9rem;
    font-weight: 500;
  }

  .separator {
    margin: 0 0.5rem;
    color: var(--accent-color-static);
  }

  .track-navigation {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .nav-btn {
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(255, 215, 0, 0.3);
    border-radius: 8px;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 1.2rem;
  }

  .nav-btn:hover {
    background: rgba(255, 215, 0, 0.2);
    border-color: rgba(255, 215, 0, 0.6);
    transform: translateY(-1px);
  }

  .nav-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }

  .track-counter {
    color: rgba(255, 255, 255, 0.7);
    font-size: 0.9rem;
    font-weight: 500;
    min-width: 60px;
    text-align: center;
  }

  .current-track-num {
    color: var(--accent-color-static);
    font-weight: 600;
  }

  .preview-note {
    text-align: center;
    color: rgba(255, 255, 255, 0.6);
    font-size: 0.9rem;
    margin: 2rem 0 0 0;
    font-style: italic;
  }

  /* Mobile Responsiveness */
  @media (max-width: 768px) {
    .premium-content {
      padding: 2rem 1.5rem;
      margin: 1rem;
    }

    .premium-content h2 {
      font-size: 2rem;
    }

    .premium-features {
      grid-template-columns: 1fr;
    }

    .pricing-options {
      flex-direction: column;
    }

    .amount {
      font-size: 1.5rem;
    }
  }
</style>

<script>
  // Premium Gate Management
  class PremiumGate {
    constructor() {
      this.selectedPlan = 'monthly';
      this.plans = {
        monthly: { amount: 299, period: 'month', duration: '30 days' },
        weekly: { amount: 99, period: 'week', duration: '7 days' }
      };
      this.init();
    }

    init() {
      // Plan selection
      document.querySelectorAll('.pricing-card').forEach(card => {
        card.addEventListener('click', () => {
          const plan = card.dataset.plan;
          this.selectPlan(plan);
        });
      });

      // Premium button
      const premiumBtn = document.getElementById('get-premium-btn');
      premiumBtn?.addEventListener('click', () => {
        this.initiatePremiumPayment();
      });
    }

    selectPlan(plan) {
      this.selectedPlan = plan;
      
      // Update UI
      document.querySelectorAll('.pricing-card').forEach(card => {
        card.classList.toggle('active', card.dataset.plan === plan);
      });

      // Update button
      const planData = this.plans[plan];
      const btnPrice = document.querySelector('.btn-price');
      if (btnPrice) {
        btnPrice.textContent = `KSh ${planData.amount}/${planData.period}`;
      }
    }

    initiatePremiumPayment() {
      const planData = this.plans[this.selectedPlan];
      
      console.log('ðŸŽµ Initiating premium payment:', planData);
      
      if (window.paymentModal) {
        window.paymentModal.open({
          type: 'music',
          amount: planData.amount,
          duration: planData.duration,
          title: `${this.selectedPlan.charAt(0).toUpperCase() + this.selectedPlan.slice(1)} Premium Access`,
          items: null
        });
      } else {
        console.error('Payment modal not available');
        alert('Payment system is loading. Please try again in a moment.');
      }
    }

    // Check if user has premium access
    static hasPremiumAccess() {
      const premiumData = localStorage.getItem('gz-premium-access');
      if (!premiumData) return false;
      
      try {
        const data = JSON.parse(premiumData);
        return new Date(data.expiresAt) > new Date();
      } catch {
        return false;
      }
    }

    // Grant premium access (called after successful payment)
    static grantPremiumAccess(duration = '30 days') {
      const expiresAt = new Date();
      if (duration === '7 days') {
        expiresAt.setDate(expiresAt.getDate() + 7);
      } else {
        expiresAt.setDate(expiresAt.getDate() + 30);
      }

      const premiumData = {
        grantedAt: new Date().toISOString(),
        expiresAt: expiresAt.toISOString(),
        plan: duration === '7 days' ? 'weekly' : 'monthly'
      };

      localStorage.setItem('gz-premium-access', JSON.stringify(premiumData));
      
      // Trigger premium access event
      window.dispatchEvent(new CustomEvent('premium:granted', { detail: premiumData }));
    }
  }

  // Single Track Audio Player with Visualization
class SingleTrackPlayer {
  constructor() {
    this.currentAudio = null;
    this.currentTrackIndex = 0;
    this.tracks = [
      { id: 'freestab', title: 'Freestab', artist: 'G\'z Radio', description: 'A smooth freestyle track showcasing lyrical prowess', previewUrl: '/audio/freestab.mp3' },
      { id: 'mazingich', title: 'Mazingich', artist: 'G\'z Radio', description: 'An energetic track with powerful beats and flow', previewUrl: '/audio/mazingich.wav' },
      { id: 'exclusive-1', title: 'Underground Vibes', artist: 'G\'z Radio', description: 'Raw underground sound with authentic street vibes', previewUrl: '/audio/freestab.mp3' },
      { id: 'exclusive-2', title: 'Golden Flow', artist: 'G\'z Radio', description: 'Premium track with golden-era hip-hop influences', previewUrl: '/audio/freestab.mp3' }
    ];
    this.audioContext = null;
    this.analyser = null;
    this.canvas = null;
    this.canvasContext = null;
    this.animationId = null;
    this.init();
  }

  init() {
    this.setupElements();
    this.setupAudioVisualization();
    this.setupControls();
    this.updateTrackDisplay();
  }

  setupElements() {
    this.canvas = document.getElementById('audioCanvas');
    this.canvasContext = this.canvas?.getContext('2d');
    this.playBtn = document.getElementById('mainPlayBtn');
    this.prevBtn = document.getElementById('prevBtn');
    this.nextBtn = document.getElementById('nextBtn');
    this.currentTimeEl = document.querySelector('.current-time');
    this.totalTimeEl = document.querySelector('.total-time');
    this.trackNumEl = document.querySelector('.current-track-num');
    this.totalTracksEl = document.querySelector('.total-tracks');
    this.trackTitleEl = document.querySelector('.current-track-title');
    this.trackArtistEl = document.querySelector('.current-track-artist');
    this.trackDescEl = document.querySelector('.current-track-description');
  }

  setupAudioVisualization() {
    if (!this.canvas || !this.canvasContext) return;
    
    // Set canvas size
    const rect = this.canvas.getBoundingClientRect();
    this.canvas.width = rect.width * window.devicePixelRatio;
    this.canvas.height = rect.height * window.devicePixelRatio;
    this.canvasContext.scale(window.devicePixelRatio, window.devicePixelRatio);
    
    // Draw initial visualization
    this.drawStaticVisualization();
  }

  drawStaticVisualization() {
    if (!this.canvasContext) return;
    
    const width = this.canvas.width / window.devicePixelRatio;
    const height = this.canvas.height / window.devicePixelRatio;
    
    this.canvasContext.clearRect(0, 0, width, height);
    
    // Draw static bars
    const barCount = 40;
    const barWidth = width / barCount;
    
    for (let i = 0; i < barCount; i++) {
      const barHeight = Math.random() * height * 0.3 + 10;
      const x = i * barWidth;
      const y = height - barHeight;
      
      // Create gradient
      const gradient = this.canvasContext.createLinearGradient(0, y, 0, height);
      gradient.addColorStop(0, 'rgba(255, 215, 0, 0.8)');
      gradient.addColorStop(1, 'rgba(255, 165, 0, 0.4)');
      
      this.canvasContext.fillStyle = gradient;
      this.canvasContext.fillRect(x, y, barWidth - 2, barHeight);
    }
  }

  setupControls() {
    if (this.playBtn) {
      this.playBtn.addEventListener('click', () => this.togglePlayback());
    }
    
    if (this.prevBtn) {
      this.prevBtn.addEventListener('click', () => this.previousTrack());
    }
    
    if (this.nextBtn) {
      this.nextBtn.addEventListener('click', () => this.nextTrack());
    }
  }

  updateTrackDisplay() {
    const track = this.tracks[this.currentTrackIndex];
    if (!track) return;
    
    if (this.trackTitleEl) this.trackTitleEl.textContent = track.title;
    if (this.trackArtistEl) this.trackArtistEl.textContent = track.artist;
    if (this.trackDescEl) this.trackDescEl.textContent = track.description;
    if (this.trackNumEl) this.trackNumEl.textContent = this.currentTrackIndex + 1;
    if (this.totalTracksEl) this.totalTracksEl.textContent = this.tracks.length;
    
    // Update navigation buttons
    if (this.prevBtn) this.prevBtn.disabled = this.currentTrackIndex === 0;
    if (this.nextBtn) this.nextBtn.disabled = this.currentTrackIndex === this.tracks.length - 1;
  }

  togglePlayback() {
    if (this.currentAudio && !this.currentAudio.paused) {
      this.pauseTrack();
    } else {
      this.playTrack();
    }
  }

  playTrack() {
    const track = this.tracks[this.currentTrackIndex];
    if (!track) return;
    
    // Stop current audio if exists
    if (this.currentAudio) {
      this.currentAudio.pause();
      this.currentAudio = null;
    }
    
    // Create new audio
    this.currentAudio = new Audio(track.previewUrl);
    
    // Setup audio context for visualization
    if (!this.audioContext) {
      this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
      this.analyser = this.audioContext.createAnalyser();
      this.analyser.fftSize = 256;
    }
    
    // Connect audio to analyser
    const source = this.audioContext.createMediaElementSource(this.currentAudio);
    source.connect(this.analyser);
    this.analyser.connect(this.audioContext.destination);
    
    // Setup event listeners
    this.currentAudio.addEventListener('loadstart', () => {
      this.updatePlayButton('loading');
    });
    
    this.currentAudio.addEventListener('canplay', () => {
      this.updatePlayButton('playing');
      this.startVisualization();
      this.startTimeTracking();
    });
    
    this.currentAudio.addEventListener('ended', () => {
      this.stopTrack();
    });
    
    this.currentAudio.addEventListener('error', () => {
      console.error('Audio failed to load');
      this.updatePlayButton('error');
    });
    
    // Start playback
    this.currentAudio.play().catch(error => {
      console.error('Playback failed:', error);
      this.updatePlayButton('error');
    });
    
    // Limit to 30 seconds
    setTimeout(() => {
      if (this.currentAudio && !this.currentAudio.paused) {
        this.stopTrack();
      }
    }, 30000);
  }

  pauseTrack() {
    if (this.currentAudio) {
      this.currentAudio.pause();
      this.updatePlayButton('paused');
      this.stopVisualization();
    }
  }

  stopTrack() {
    if (this.currentAudio) {
      this.currentAudio.pause();
      this.currentAudio.currentTime = 0;
      this.currentAudio = null;
    }
    
    this.updatePlayButton('stopped');
    this.stopVisualization();
    this.drawStaticVisualization();
    this.updateTimeDisplay(0, 30);
  }

  previousTrack() {
    if (this.currentTrackIndex > 0) {
      this.stopTrack();
      this.currentTrackIndex--;
      this.updateTrackDisplay();
    }
  }

  nextTrack() {
    if (this.currentTrackIndex < this.tracks.length - 1) {
      this.stopTrack();
      this.currentTrackIndex++;
      this.updateTrackDisplay();
    }
  }

  updatePlayButton(state) {
    if (!this.playBtn) return;
    
    const playIcon = this.playBtn.querySelector('.play-icon');
    const pauseIcon = this.playBtn.querySelector('.pause-icon');
    
    switch (state) {
      case 'loading':
        if (playIcon) {
          playIcon.innerHTML = '<div class="loading-spinner"></div>';
          playIcon.style.display = 'inline';
        }
        if (pauseIcon) pauseIcon.style.display = 'none';
        break;
      case 'playing':
        if (playIcon) playIcon.style.display = 'none';
        if (pauseIcon) pauseIcon.style.display = 'inline';
        break;
      case 'paused':
      case 'stopped':
      case 'error':
        if (playIcon) {
          playIcon.innerHTML = '<svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor"><path d="M8 5v14l11-7z"/></svg>';
          playIcon.style.display = 'inline';
        }
        if (pauseIcon) pauseIcon.style.display = 'none';
        break;
    }
  }

  startVisualization() {
    if (!this.analyser || !this.canvasContext) return;
    
    const bufferLength = this.analyser.frequencyBinCount;
    const dataArray = new Uint8Array(bufferLength);
    
    const draw = () => {
      if (!this.currentAudio || this.currentAudio.paused) return;
      
      this.animationId = requestAnimationFrame(draw);
      this.analyser.getByteFrequencyData(dataArray);
      
      const width = this.canvas.width / window.devicePixelRatio;
      const height = this.canvas.height / window.devicePixelRatio;
      
      this.canvasContext.clearRect(0, 0, width, height);
      
      const barCount = 40;
      const barWidth = width / barCount;
      
      for (let i = 0; i < barCount; i++) {
        const dataIndex = Math.floor(i * bufferLength / barCount);
        const barHeight = (dataArray[dataIndex] / 255) * height * 0.8;
        const x = i * barWidth;
        const y = height - barHeight;
        
        // Create gradient based on frequency
        const gradient = this.canvasContext.createLinearGradient(0, y, 0, height);
        const intensity = dataArray[dataIndex] / 255;
        gradient.addColorStop(0, `rgba(255, 215, 0, ${0.8 + intensity * 0.2})`);
        gradient.addColorStop(1, `rgba(255, 165, 0, ${0.4 + intensity * 0.4})`);
        
        this.canvasContext.fillStyle = gradient;
        this.canvasContext.fillRect(x, y, barWidth - 2, barHeight);
      }
    };
    
    draw();
  }

  stopVisualization() {
    if (this.animationId) {
      cancelAnimationFrame(this.animationId);
      this.animationId = null;
    }
  }

  startTimeTracking() {
    const updateTime = () => {
      if (this.currentAudio && !this.currentAudio.paused) {
        const currentTime = this.currentAudio.currentTime;
        const duration = Math.min(this.currentAudio.duration || 30, 30);
        this.updateTimeDisplay(currentTime, duration);
        requestAnimationFrame(updateTime);
      }
    };
    updateTime();
  }

  updateTimeDisplay(currentTime, duration) {
    const formatTime = (time) => {
      const minutes = Math.floor(time / 60);
      const seconds = Math.floor(time % 60);
      return `${minutes}:${seconds.toString().padStart(2, '0')}`;
    };
    
    if (this.currentTimeEl) this.currentTimeEl.textContent = formatTime(currentTime);
    if (this.totalTimeEl) this.totalTimeEl.textContent = formatTime(duration);
  }
}

// Initialize premium gate and single track player
document.addEventListener('DOMContentLoaded', () => {
  window.premiumGate = new PremiumGate();
  window.singleTrackPlayer = new SingleTrackPlayer();
});
</script>
